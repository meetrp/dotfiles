##
# GIT related artifacts
#
# All the git related functions and variables required for the bashrc to
# function properly are being defined in here.
#
# @author       Rp <rp@meetrp.com>
# @category     Shell script
# @package      bashrc
# @date         1/Mar/2019
# @license      <<Check LICENSE file for details>>
##

function __git_version() {
	#
	# is this a git repo?!
	local BRANCH=$(git symbolic-ref HEAD 2>/dev/null | cut -d'/' -f3-)
	if [ -z $BRANCH ]; then
		echo "Not a git repo!"
		return
	fi

	#
	# mandatory details
	local BRANCH_NAME=$(echo $BRANCH | awk -F'/' '{print $NF}')
	local COMMIT=$(git reflog -n1 2> /dev/null | awk '{print $1}')
	local COUNT=$(git rev-list --all --count 2> /dev/null)

	#
	# tag details
	local TAG=""
	local DESCRIBE=$(git describe --tags 2> /dev/null)
	if [ ! -z $DESCRIBE ]; then
		local TAG=$(echo $DESCRIBE | awk '{split($0,a,"-"); print a[1]}')
		local COUNT=$(echo $DESCRIBE | awk '{split($0,a,"-"); print a[2]}')
		local VER="$TAG (${COMMIT}@$BRANCH)"
	fi

	if [ -z $COUNT ]; then
		COUNT="0";
	fi;

	#
	# helper variables
	local SUFFIX=".$COUNT ($COMMIT)"
	local SUFFIX_BRANCH=".$COUNT ($COMMIT@$BRANCH_NAME)"
	[[ -z $VER ]] && VER="$BRANCH_NAME$SUFFIX"

	#
	# git-flow aware branches
	if echo $BRANCH | grep -q "\<master\>"
	then
		[[ -z $TAG ]] && VER="" || VER="$TAG-"
		VER=$VER"rel$SUFFIX"
	elif echo $BRANCH | grep -q "\<develop\>"
	then
		[[ -z $TAG ]] && VER="" || VER="$TAG-"
		VER=$VER"alpha$SUFFIX"
	elif echo $BRANCH | grep -q "\<release/"
	then
		[[ -z $TAG ]] && VER="" || VER="$TAG-"
		VER=$VER"rc$SUFFIX_BRANCH"
	elif echo $BRANCH | grep -q "\<hotfix/"
	then
		[[ -z $TAG ]] && VER="" || VER="$TAG-"
		VER=$VER"fix$SUFFIX_BRANCH"
	elif echo $BRANCH | grep -q "\<feature\/"
	then
		[[ -z $TAG ]] && VER="" || VER="$TAG-"
		VER=$VER"wip$SUFFIX_BRANCH"
	fi

	echo $VER
}

function __git_log() {
	local __COUNT=$1
	local __GIT_MIN_VERSION=1.8.3
	local __GIT_VERSION=$(git --version | awk '{print $3}')

	local __AWK=""
	case "$__OS" in
		"MAC") __AWK="gawk" ;;
		"LINUX") __AWK="awk" ;;
	esac

	local __DEV_INFO=" || %C(blue)%an%C(reset) on %C(green)%ad%C(reset)%C(red)(%ar)%C(reset) || %C(blue)[%GS]%C(reset)"
	if [ $(${__AWK} 'BEGIN{ print "'$__GIT_VERSION'"<"'$__GIT_MIN_VERSION'" }') -eq 1 ]; then
		git log --pretty=format:"%C(yellow)%h%C(reset) ||%C(cyan)%d%C(reset) %s ${__DEV_INFO}" --graph --date=short --decorate -n${__COUNT}
	else
		git log --pretty=format:"%C(auto)%h ||%C(auto)%d %s ${__DEV_INFO}" --graph --date=short --decorate -n${__COUNT}
	fi
}

function __set_git_aliases() {
	alias b='git branch -vv'
	alias l='__git_log 10'
	alias l2='__git_log'
	alias st='git status .'
	alias d='git diff'
	alias a='git add .'
	alias ma='git checkout master'
	alias dev='git checkout develop'
	alias v='__git_version'
	alias c='git checkout'
	alias p='git pull'
	alias ref='git reflog'
	alias t='git tag -l -n1'
	alias ft='git fetch'
	alias show='git show --name-status --show-signature'
	alias gp='git fetch --prune; git branch -vv | grep ": gone]" |  grep -v "\*" | awk '\''{ print $1; }'\'' | xargs -r git branch -D'
	alias gt='git fetch --prune-tags'
}

function __set_git_completions() {
	case "$__OS" in
		"MAC")
			# -- git completion
			if [ -f $(brew --prefix)/git/contrib/completion/git-completion.bash ]; then
				source $(brew --prefix)/git/contrib/completion/git-completion.bash
			elif [ -f $(brew --prefix)/etc/bash_completion.d/git-completion.bash ]; then
				source $(brew --prefix)/etc/bash_completion.d/git-completion.bash
			fi

			# -- git flow completion
			if [ -f $(brew --prefix)/etc/bash_completion.d/git-flow-completion.bash ]; then
				source $(brew --prefix)/etc/bash_completion.d/git-flow-completion.bash
			fi
			;;
		"LINUX")
			# -- git flow completion
			if [ -f /etc/bash_completion.d/git-flow-completion.bash ]; then
				source /etc/bash_completion.d/git-flow-completion.bash
			fi
			;;
	esac
}

function __set_git_prompt() {
	# -- git prompt
	# -- Downloaded URL: https://github.com/magicmonty/bash-git-prompt.git
	if [ -f ~/.bash-git-prompt/gitprompt.sh ]; then
		GIT_PROMPT_ONLY_IN_REPO=1
		# GIT_PROMPT_FETCH_REMOTE_STATUS=0   # uncomment to avoid fetching remote status
		GIT_PROMPT_SHOW_UPSTREAM=1 # uncomment to show upstream tracking branch
		GIT_PROMPT_SHOW_UNTRACKED_FILES=all # can be no, normal or all; determines counting of untracked files
		# GIT_PROMPT_SHOW_CHANGED_FILES_COUNT=0 # uncomment to avoid printing the number of changed files
		# GIT_PROMPT_THEME=Custom # use custom theme specified in file GIT_PROMPT_THEME_FILE (default ~/.git-prompt-colors.sh)
		# GIT_PROMPT_THEME_FILE=~/.git-prompt-colors.sh
		GIT_PROMPT_THEME=TruncatedPwd_WindowTitle # use theme optimized for solarized color scheme
		source ~/.bash-git-prompt/gitprompt.sh
	fi
}